"""init

Revision ID: 9311be5d5fb1
Revises: 
Create Date: 2025-09-11 16:37:15.957837

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9311be5d5fb1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('allocations', sa.Column('status', sa.String(), nullable=False))
    op.add_column('allocations', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('dynos', sa.Column('max_weight_lbs', sa.Integer(), nullable=False))
    op.add_column('dynos', sa.Column('supported_drive', sa.String(), nullable=False))
    op.add_column('dynos', sa.Column('supported_test_types', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('dynos', sa.Column('available_from', sa.Date(), nullable=True))
    op.add_column('dynos', sa.Column('available_to', sa.Date(), nullable=True))
    op.add_column('dynos', sa.Column('enabled', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'dynos', ['name'])
    op.drop_column('dynos', 'supported_test_type')
    op.drop_column('dynos', 'supported_traction')
    op.drop_column('dynos', 'supported_weight_class')
    op.add_column('vehicles', sa.Column('vin', sa.String(), nullable=True))
    op.add_column('vehicles', sa.Column('weight_lbs', sa.Integer(), nullable=False))
    op.add_column('vehicles', sa.Column('drive_type', sa.String(), nullable=False))
    op.create_unique_constraint(None, 'vehicles', ['vin'])
    op.drop_column('vehicles', 'traction')
    op.drop_column('vehicles', 'weight_class')
    op.drop_column('vehicles', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicles', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('vehicles', sa.Column('weight_class', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('vehicles', sa.Column('traction', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'vehicles', type_='unique')
    op.drop_column('vehicles', 'drive_type')
    op.drop_column('vehicles', 'weight_lbs')
    op.drop_column('vehicles', 'vin')
    op.add_column('dynos', sa.Column('supported_weight_class', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('dynos', sa.Column('supported_traction', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('dynos', sa.Column('supported_test_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'dynos', type_='unique')
    op.drop_column('dynos', 'enabled')
    op.drop_column('dynos', 'available_to')
    op.drop_column('dynos', 'available_from')
    op.drop_column('dynos', 'supported_test_types')
    op.drop_column('dynos', 'supported_drive')
    op.drop_column('dynos', 'max_weight_lbs')
    op.drop_column('allocations', 'created_at')
    op.drop_column('allocations', 'status')
    # ### end Alembic commands ###
